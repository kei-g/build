jobs:
  digest:
    name: Acquire digest of the latest image
    outputs:
      llvm: ${{ steps.llvm.outputs.digest }}
    runs-on: ubuntu-latest
    steps:
      - id: llvm
        name: Acquire digest of the latest snowstep/llvm
        run: |
          digest=$(
            curl -s https://hub.docker.com/v2/namespaces/snowstep/repositories/llvm/tags \
              | jq -cr '[.results[]|select(.name=="jammy").images[]|select(.architecture=="amd64")]|max_by(.last_pushed).digest'
          )
          printf 'digest=%s\n' $digest | tee -a $GITHUB_OUTPUT
        shell: bash
  libraries:
    container:
      image: snowstep/llvm@${{ needs.digest.outputs.llvm }}
    env:
      AR: llvm-ar
      AS: ${{ matrix.as || 'llvm-as' }}
      CC: clang
      CFLAGS: -flto -march=sandybridge
      CXX: clang++
      CXXFLAGS: -flto -march=sandybridge
      LD: clang++
      LDFLAGS: -Wl,--build-id=fast -Wl,--lto-O3 -Wl,--no-gnu-unique -Wl,--thinlto-jobs=all -fuse-ld=lld -march=sandybridge
      NM: llvm-nm
      OBJCOPY: llvm-objcopy
      OBJDUMP: llvm-objdump
      OTOOL: llvm-otool
      RANLIB: llvm-ranlib
      STRIP: ${{ matrix.strip }}
    name: Build ${{ matrix.name }}
    needs:
      - digest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - as: yasm
            cmake: >-
              -DENABLE_DOCS=OFF
              -DENABLE_EXAMPLES=OFF
              -DENABLE_TESTS=OFF
              -DENABLE_TOOLS=OFF
            name: libaom
            ninja: true
            packages: >
              yasm
            repo: https://aomedia.googlesource.com/aom
            strip: llvm-strip
            version: v3.6.1
            workdir: build
          - name: libilbc
            ninja: true
            packages: >
              patch
            patch: CMakeLists.txt libilbc.patch
            repo: https://github.com/TimothyGu/libilbc.git
            strip: llvm-strip
            version: v3.0.4
            workdir: build
          - name: liblzma5
            packages: >
              make
            repo: https://github.com/tukaani-project/xz.git
            strip: llvm-strip
            version: v5.4.3
            workdir: build
          - name: libopus
            ninja: true
            repo: https://github.com/xiph/opus.git
            strip: llvm-strip
            version: v1.4
            workdir: build
          - as: llvm-as
            name: libsdl2
            ninja: true
            packages: >
              libasound2-dev
              libdbus-1-dev
              libdrm-dev
              libegl-dev
              libgbm-dev
              libgl-dev
              libpulse-dev
              libsndio-dev
              libudev-dev
              libwayland-dev
              libx11-dev
              libxext-dev
              libxkbcommon-dev
            repo: https://github.com/libsdl-org/SDL.git
            strip: llvm-strip
            version: release-2.26.5
            workdir: build
          - as: llvm-as
            cmake: >-
              -DSNAPPY_BUILD_BENCHMARKS=OFF
              -DSNAPPY_BUILD_TESTS=OFF
              -DSNAPPY_FUZZING_BUILD=OFF
              -DSNAPPY_REQUIRE_AVX=ON
            name: libsnappy
            ninja: true
            packages: >
              patch
            patch: snappy.cc snappy.patch
            repo: https://github.com/google/snappy.git
            strip: llvm-strip
            version: 1.1.10
            workdir: build
          - as: yasm
            cmake: >-
              -DBUILD_APPS=OFF
              -DBUILD_DEC=OFF
            name: libsvtav1
            ninja: true
            packages: >
              yasm
            repo: https://gitlab.com/AOMediaCodec/SVT-AV1.git
            strip: llvm-strip
            version: v1.5.0
            workdir: build
          - as: yasm
            configure: >-
              --disable-codec-srcs
              --disable-debug-libs
              --disable-docs
              --disable-examples
              --disable-static
              --disable-tools
              --enable-better-hw-compatibility
              --enable-libyuv
              --enable-multi-res-encoding
              --enable-pic
              --enable-postproc
              --enable-shared
              --enable-vp8
              --enable-vp9
              --enable-vp9-highbitdepth
              --enable-vp9-postproc
              --enable-vp9-temporal-denoising
              --enable-webm-io
            name: libvpx7
            ninja: false
            packages:
              libyuv-dev
              make
              yasm
            repo: https://chromium.googlesource.com/webm/libvpx
            strip: strip
            version: v1.13.0
            workdir: work
          - cmake: >-
              -DWEBP_BUILD_CWEBP=OFF
              -DWEBP_BUILD_DWEBP=OFF
              -DWEBP_BUILD_IMG2WEBP=OFF
              -DWEBP_BUILD_WEBPINFO=OFF
              -DWEBP_BUILD_WEBPMUX=OFF
            name: libwebp7
            ninja: true
            repo: https://chromium.googlesource.com/webm/libwebp
            strip: llvm-strip
            version: v1.3.0
            workdir: build
          - cmake: >-
              -DENABLE_CLI=OFF
              -DENABLE_LIBNUMA=ON
              -DNATIVE_BUILD=ON
            name: libx265
            ninja: true
            packages: >
              libnuma-dev
            repo: https://bitbucket.org/multicoreware/x265_git.git
            sourcedir: source
            strip: llvm-strip
            version: 3.5
            workdir: work
    steps:
      - env:
          DEBIAN_FRONTEND: noninteractive
        name: Install dependent packages
        run: |
          apt-fast update
          apt-fast upgrade -y
          apt-fast install --no-install-recommends -y \
            cmake \
            git \
            libtool \
            pkg-config \
            ${{ (matrix.ninja && 'python3-pip') || '' }} \
            ${{ matrix.packages }}
      - if: ${{ matrix.ninja }}
        run: |
          pip install --upgrade pip
          pip install ninja
      - name: Clone the repository
        run: |
          git clone --depth 1 \
                    --recursive \
                    --single-branch \
                    -b ${{ matrix.version }} \
                    ${{ matrix.repo }} \
                    /tmp/source
      - if: ${{ matrix.patch }}
        name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - if: ${{ matrix.patch }}
        name: Apply patch
        run: |
          patch --batch --unified /tmp/source/${{ matrix.patch }}
      - if: ${{ matrix.configure != '' }}
        name: Build ${{ matrix.name }}
        run: |
          mkdir -pv /tmp/source/${{ matrix.workdir }}
          cd /tmp/source/${{ matrix.workdir }}
          ../configure \
            ${{ matrix.configure }} \
            --prefix=/dist
          make -j $(nproc)
          make install
      - if: ${{ matrix.configure == '' }}
        name: Build ${{ matrix.name }}
        run: |
          mkdir -pv /tmp/source/${{ matrix.workdir }}
          cd /tmp/source/${{ matrix.workdir }}
          cmake \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/dist \
            ${{ matrix.cmake }} \
            -G "${{ (matrix.ninja && 'Ninja') || 'Unix Makefiles' }}" \
            ../${{ matrix.sourcedir }}
          cmake --build .
          cmake --install .
      - name: Replace '/dist' with '/usr/local' of pkgconfig
        run: |
          [[ -d /dist/lib/pkgconfig ]] || exit 0
          for name in $(ls /dist/lib/pkgconfig/*.pc); do
            sed -i 's#/dist#/usr/local#g' $name || true
          done
        shell: bash
      - if: ${{ matrix.name == 'libilbc' }}
        name: Rename libilbc.pc
        run: |
          mv -v /dist/lib/pkgconfig/{lib,}ilbc.pc
        shell: bash
      - if: ${{ matrix.name == 'libsnappy' }}
        name: Generate snappy.pc
        run: |
          mkdir -pv /dist/lib/pkgconfig
          {
            echo prefix=/usr/local
            echo exec_prefix=\$\{prefix\}
            echo includedir=\$\{prefix\}/include
            echo libdir=\$\{prefix\}/lib
            echo
            echo Name: Snappy
            echo Description: A fast compression/decompression library
            echo Version: ${{ matrix.version }}
            echo Libs: -L\$\{libdir\} -lsnappy
            echo Cflags: -I\$\{includedir\}
          } > /dist/lib/pkgconfig/snappy.pc
      - name: Archive the build binaries
        run: |
          tar --group=root \
              --owner=root \
              -C /dist \
              -cf /tmp/${{ matrix.name }}.tar \
              .
      - name: Upload the archive
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: /tmp/${{ matrix.name }}.tar
name: Build
on:
  workflow_dispatch:
